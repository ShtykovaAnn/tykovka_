//https://leetcode.com/problems/ugly-number-ii/

class Solution {
public:
    void siftDown(vector<long long>& heap, long long i) {
        while (2 * i + 1 < heap.size()) {
            int left = 2 * i + 1;
            int right = 2 * i + 2;
            int j = left;
            if (right < heap.size() && heap[right] < heap[j]) {
                j = right;
            }
            if (heap[i] <= heap[j]) {
                break;
            }
            swap(heap[i], heap[j]);
            i = j;
        }
    }
    
    void SiftUp(vector <long long>& heap, long long i){
        long long par = (i - 1) / 2;
        while ( i > 0 && heap[i] < heap[par]){
            swap(heap[i], heap[par]);
            i = par;
            par = (i - 1) / 2;
        }
        
    }
    
    int extractMin(vector<long long>& heap) {
        long long min = heap[0];
        swap(heap[0], heap[heap.size() - 1]);
        heap.erase(heap.begin() + heap.size() - 1);
        siftDown(heap, 0);
        return min;
    } 
    
    void Insert(vector <long long>& heap, long long x){
        heap.push_back(x);
        SiftUp(heap, heap.size() - 1);
    }
    
    int nthUglyNumber(int n) {
        vector<long long> nums = {1};
        unordered_set<long long> s;
        s.insert(1);
        vector<long long> primes = {2,3,5};
        
        long long min;
        while(n>0){
            min = extractMin(nums);
            for(long long a:primes){
                if(s.find(min*a) == s.end()){
                    Insert(nums, min*a);
                    s.insert(min*a);
                }
            }
            n--;
            
        }
        return min;
    }
};
