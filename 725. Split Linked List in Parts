//https://leetcode.com/problems/split-linked-list-in-parts/submissions/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* root, int k) {
        int size = 0;
        vector<ListNode*> result;
        ListNode *tmp=root, *prev=NULL;
        while(tmp){
            size++;
            tmp = tmp->next;
        }
        int Q = size/k;
        int l = size%k;
        tmp = root;
        while(k > 0){
            int j = Q;
            result.push_back(tmp);
            while(tmp && j > 0){
                prev = tmp;
                tmp = tmp->next;
                j--;
            }
            if(l > 0 && tmp){
                prev = tmp;
                tmp = tmp->next;
                l--;
            }
            if(prev)
                prev->next = NULL;
            k--;
        }
        return result;
    }
};
